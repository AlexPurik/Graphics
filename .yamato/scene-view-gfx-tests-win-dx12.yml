projName: scene-view-gfx-tests
editors:
  - version: 941928b624d9
testplatforms:
  - name: editmode
    args: --suite=editor

win_apis:
  - name: DX12
    cmd: -force-d3d12
  - name: DX11
    cmd: -force-d3d11
  - name: Vulkan
    cmd: -force-vulkan
linux_apis:
  - name: GLCore
    cmd: -force-glcore
  - name: Vulkan
    cmd: -force-vulkan
---
{% for editor in editors %}
{% for testplatform in testplatforms %}

{% for win_api in win_apis %}
Windows64_{{ win_api.name }}_{{ testplatform.name }}_{{ editor.version }}:
  name : SceneViewGFXTests Windows64_{{ win_api.name }}_{{ testplatform.name }} on version {{ editor.version }} Fast
  agent:
    type: Unity::VM::GPU
    image: slough-ops/gamecode-win10-nvidia436:latest
    flavor: b1.xlarge
    model: rtx2080
  commands:
    -  NetSh Advfirewall set allprofiles state off
    -  git clone git@github.cds.internal.unity3d.com:unity/utr.git utr
    -  pip install unity-downloader-cli --index-url https://artifactory.prd.it.unity3d.com/artifactory/api/pypi/pypi/simple
    -  unity-downloader-cli --source-file unity_revision.txt -c editor --wait --published-only

    {% if testplatform.name == "Standalone" %}
    - utr\utr {{ testplatform.args }}Windows64 --testproject=TestProjects/SceneViewGFXTests --extra-editor-arg="-executemethod" --extra-editor-arg="CustomBuild.BuildWindows{{ win_api.name }}Linear" --editor-location=.Editor --artifacts_path=upm-ci~/test-results --timeout=1200
    {% else %}
    - utr\utr {{ testplatform.args }} --testproject=TestProjects/SceneViewGFXTests --extra-editor-arg="{{ win_api.cmd }}" --editor-location=.Editor --artifacts_path=upm-ci~/test-results
    {% endif %}
  dependencies:
    - .yamato/_editor_priming.yml#editor:priming:{{ editor.version }}:Win
  artifacts:
    logs:
      paths:
        - "**/test-results/**"
        - "TestProjects/SceneViewGFXTests/Logs/*.log"
{% endfor %}

OSX_Metal_Intel_{{ testplatform.name }}_{{ editor.version }}:
  name : SceneViewGFXTests OSX_Metal_Intel_{{ testplatform.name }} on version {{ editor.version }} Fast
  agent:
    type: Unity::metal::macmini
    image: slough-ops/macos-10.14-xcode:stable
    flavor: m1.mac
  commands:
    - git clone git@github.cds.internal.unity3d.com:unity/utr.git utr
    
    - ssh -i ~/.ssh/id_rsa_macmini -o "StrictHostKeyChecking=no" bokken@$BOKKEN_DEVICE_IP "bash -lc 'pip3 install --user unity-downloader-cli --index-url https://artifactory.prd.it.unity3d.com/artifactory/api/pypi/pypi/simple'"
    - scp -i ~/.ssh/id_rsa_macmini -o "StrictHostKeyChecking=no" -r $YAMATO_SOURCE_DIR bokken@$BOKKEN_DEVICE_IP:~/{{ projName }}
    - scp -i ~/.ssh/id_rsa_macmini -o "StrictHostKeyChecking=no" ~/.ssh/id_rsa_macmini bokken@$BOKKEN_DEVICE_IP:~/.ssh/id_rsa_macmini
    - ssh -i ~/.ssh/id_rsa_macmini -o "StrictHostKeyChecking=no" bokken@$BOKKEN_DEVICE_IP '$(python3 -m site --user-base)/bin/unity-downloader-cli --source-file ~/{{ projName }}/unity_revision.txt -c editor --wait --published'
    - ssh -i ~/.ssh/id_rsa_macmini bokken@$BOKKEN_DEVICE_IP ".Editor/Unity.app/Contents/MacOS/Unity -version"
    {% if testplatform.name == "Standalone" %}
    - |
      ssh -i ~/.ssh/id_rsa_macmini -o "StrictHostKeyChecking=no" bokken@$BOKKEN_DEVICE_IP 'cd ~/{{ projName }} && ~/{{ projName }}/utr/utr {{ testplatform.args }} --testproject=TestProjects/SceneViewGFXTests --editor-location=/Users/bokken/.Editor --artifacts_path=/Users/bokken/{{ projName }}/test-results --timeout=1200'
    {% else %}
    - |
      ssh -i ~/.ssh/id_rsa_macmini -o "StrictHostKeyChecking=no" bokken@$BOKKEN_DEVICE_IP 'cd ~/{{ projName }} && ~/{{ projName }}/utr/utr {{ testplatform.args }} --testproject=TestProjects/SceneViewGFXTests --editor-location=/Users/bokken/.Editor --artifacts_path=/Users/bokken/{{ projName }}/test-results'
    {% endif %}
      UTR_RESULT=$?
      mkdir -p ~/test-results/
      scp -i ~/.ssh/id_rsa_macmini -o "StrictHostKeyChecking=no" -r bokken@$BOKKEN_DEVICE_IP:/Users/bokken/{{ projName }}/test-results/ test-results/
      exit $UTR_RESULT
  dependencies:
    - .yamato/_editor_priming.yml#editor:priming:{{ editor.version }}:OSX
  artifacts:
    logs:
      paths:
        - "**/test-results/**"
        - "TestProjects/SceneViewGFXTests/Logs/*.log"

# Apple Silicon
OSX_Metal_Silicon_{{ testplatform.name }}_{{ editor.version }}:
  name : SceneViewGFXTests OSX_Metal_Silicon_{{ testplatform.name }} on version {{ editor.version }}
  agent:
    type: Unity::metal::macmini
    image: slough-ops/macos-11-base:stable
    model: M1
    flavor: m1.mac
  commands:
    -  curl -s https://artifactory.prd.it.unity3d.com/artifactory/unity-tools-local/utr-standalone/utr --output utr
    -  chmod +x ./utr
    -  rsync -az $YAMATO_SOURCE_DIR/ bokken@$BOKKEN_DEVICE_IP:~
    -  brew tap --force-auto-update unity/unity git@github.cds.internal.unity3d.com:unity/homebrew-unity.git
    -  brew install unity-downloader-cli
    -  unity-downloader-cli --source-file unity_revision.txt -c editor -c il2cpp  --wait --published-only
    - scp -i ~/.ssh/id_rsa_macmini -o "StrictHostKeyChecking=no" ~/.ssh/id_rsa_macmini bokken@$BOKKEN_DEVICE_IP:~/.ssh/id_rsa_macmini
    - rsync -az .Editor/ bokken@$BOKKEN_DEVICE_IP:~/.Editor
    -  |5-
            ssh -i ~/.ssh/id_rsa_macmini -o "StrictHostKeyChecking=no" bokken@$BOKKEN_DEVICE_IP './utr {{ testplatform.args }} --testproject=TestProjects/SceneViewGFXTests --editor-location=.Editor --artifacts_path=test-results --architecture=ARM64'
            UTR_RESULT=$?
            scp -i ~/.ssh/id_rsa_macmini -o "StrictHostKeyChecking=no" -r bokken@$BOKKEN_DEVICE_IP:test-results/ test-results/
            exit $UTR_RESULT
  dependencies:
    - .yamato/_editor_priming.yml#editor:priming:trunk:OSX_Apple_Silicon
  artifacts:
    logs:
      paths:
        - "**/test-results/**"
        - "TestProjects/SceneViewGFXTests/Logs/*.log"

{% for linux_api in linux_apis %}
Linux64_{{ linux_api.name }}_{{ testplatform.name }}_{{ editor.version }}:
  name : SceneViewGFXTests Linux64_{{ linux_api.name }}_{{ testplatform.name }} on version {{ editor.version }} Fast
  agent:
    type: Unity::VM::GPU
    image: cds-ops/ubuntu-18.04-base:stable
    flavor: b1.xlarge
    model: rtx2080
  commands:
    - sudo -H pip install --upgrade pip
    - sudo -H pip install unity-downloader-cli --index-url https://artifactory.prd.it.unity3d.com/artifactory/api/pypi/pypi/simple
    - git clone git@github.cds.internal.unity3d.com:unity/utr.git utr
    - sudo unity-downloader-cli --source-file unity_revision.txt -c editor --wait --published-only
    - sudo apt-get update -y
    - sudo apt-get install -y ocl-icd-opencl-dev
    
    {% if testplatform.name == "Standalone" %}
    - DISPLAY=:0.0 utr/utr {{ testplatform.args }}Linux64 --extra-editor-arg="-executemethod" --extra-editor-arg="CustomBuild.BuildLinux{{ linux_api.name }}Linear" --testproject=TestProjects/SceneViewGFXTests --editor-location=.Editor --artifacts_path=test-results --timeout=1200
    {% else %}
    - DISPLAY=:0.0 utr/utr --extra-editor-arg="{{ linux_api.cmd }}"  {{ testplatform.args }} --testproject=TestProjects/SceneViewGFXTests --editor-location=.Editor --artifacts_path=test-results
    {% endif %}
  dependencies:
    - .yamato/_editor_priming.yml#editor:priming:{{ editor.version }}:Linux
  artifacts:
    logs:
      paths:
        - "**/test-results/**"
        - "TestProjects/SceneViewGFXTests/Logs/*.log"
{% endfor %}

{% endfor %}
{% endfor %}

All_Fast:
  name: SceneViewGFXTests ALL
  dependencies:
  {% for testplatform in testplatforms %}
  {% for editor in editors %}

  {% for win_api in win_apis %}
  - path: .yamato/scene-view-gfx-tests-win-dx12.yml#Windows64_{{ win_api.name }}_{{ testplatform.name }}_{{ editor.version }}
    rerun: always
  {% endfor %}

  - path: .yamato/scene-view-gfx-tests-win-dx12.yml#OSX_Metal_Intel_{{ testplatform.name }}_{{ editor.version }}
    rerun: always

  - path: .yamato/scene-view-gfx-tests-win-dx12.yml#OSX_Metal_Silicon_{{ testplatform.name }}_{{ editor.version }}
    rerun: always

  {% for linux_api in linux_apis %}
  - path: .yamato/scene-view-gfx-tests-win-dx12.yml#Linux64_{{ linux_api.name }}_{{ testplatform.name }}_{{ editor.version }}
    rerun: always
  {% endfor %}

  {% endfor %}
  {% endfor %}
